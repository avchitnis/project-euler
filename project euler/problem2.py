"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

from typing import Generator

def fibonacci(n: int) -> int:
    """
    give the nth term of the Fibonacci sequence
    """

    if n <= 1:
        return n
    
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def generator() -> Generator[int, None, None]:
    """
    generates a Fibonacci sequence whose values do not exceed four million
    """

    i = 0
    while fibonacci(i) < 4000000:
        yield fibonacci(i)
        i += 1

sequence = [i for i in generator()]

def sum_of_numbers(sequence: list) -> int:
    """
    find the sum of the even valued terms of a list
    """

    total = 0

    for n in sequence:
        if n % 2 == 0:
            total = total + n
    
    return total

print(sum_of_numbers(sequence))